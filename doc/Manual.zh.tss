\line
\t1 cwb参考手册\et1
\p 请注意,在版本号<=1.0.0的测试阶段,API可能会经常发生不兼容变动,请注意阅读手册\ep
\line
\t2 简介\et2
\p cwb是一个轻量级,快速的C语言网络框架\ep
\p cwb使用C99语法,仅依赖POSIX标准,便于移植\ep
\p cwb对内存管理,编码与网络协议提供了简洁的结构,便于实现Web服务器\ep
\line
\t2 安装\et2
\p 不再赘述,详见/doc/Install.zh \ep
\line
\t2 使用\et2
\p 位于/src目录中的Makefile在指定install目标时,默认将头文件安装到/usr/include,请根据情况调整您的编译器选项,或者根据/doc/Install.zh的指引修改头文件的安装目录\ep
\p 库文件默认被安装到/usr/lib,请根据情况调整您的链接器选项,或者根据/doc/Install.zh的指引修改库文件的安装目录\ep
\p 通常情况下,默认的安装选项已经足矣.在编译使用cwb库的程序时,往往仅需指定\code -lcwb\ecode 选项即可,例如\ep \nl
\code
c99 MY_SOURCE.c -lcwb
\ecode
\line
\t2 库一览\et2
Time\tab \tab 时间库
Net\tab \tab 网络库,封装了POSIX的网络API
IO\tab \tab IO库,封装了POSIX的IO多路复用API
Coder\tab \tab 编码器库,实现了Web开发中常用的编码方式
Event\tab \tab 事件驱动库,实现了事件驱动框架
Ds\tab \tab 数据结构库,实现了常用数据结构
Dstr\tab \tab 动态字符串库,实现了动态字符串管理
Buffer\tab \tab 动态缓冲区库,实现了二进制数据的动态构建
Serializer\tab  序列化库,实现了数据结构的序列化与反序列化
Util\tab \tab 工具库,实现C语言中常用工具
Httpd\tab \tab HTTP服务器库,实现了HTTP协议
\line
\t2 约定\et2
\p cwb的代码采用内核代码风格\ep
\p 文档使用tess排版生成,制表符已经被替换为空格.在阅读源代码时,制表符宽度设为8更合适\ep
\p 文档中,未说明的返回int值的函数,依照习惯返回0为成功,非零值为失败\ep
\p 未说明的返回指针的函数,依照习惯返回普通指针为成功,NULL指针为失败\ep
\nl
\nl

\t2 Time\et2
\t3 头文件\et3
\code
\tab	cwb/Time.h
\ecode
\t3 数据类型\et3
\code
\tab	Cwb_Time_MicroSecond	以毫秒为单位的时间类型
\ecode
\t3 函数\et3
\code
\tab	Cwb_Tine_MircoSecond cwb_time_get(void);
	获取当前时间
	Return:
		当前时间,以毫秒为单位
\ecode
\line

\t2 Net\et2
\t3 头文件\et3
\code
\tab	cwb/Net.h
\ecode
\t3 Note\et3
\p Net库中的函数全部为非阻塞的,对于详细的IO状态检测,详见IO库\ep
\t3 函数\et3
\code
\tab	int cwb_net_socket(void);
	创建一个非阻塞,TCP类型的IPv4套接字
	Return:
		套接字的文件描述符

	int cwb_net_bind(int sock,int port);
	将套接字绑定到端口
	Input:
		sock	套接字
		port	绑定到的端口
	
	int cwb_net_listen(int sock,int backLog);
	监听套接字
	Input:
		sock	套接字
		backLog	套接字的backlog设置(详见内核文档)
	
	int cwb_net_accept(int sock);
	接受套接字的连接
	Input:
		sock	套接字
	Return:
		<0	失败
		Other	接受的连接的文件描述符

	ssize_t cwb_net_write(int sock,void *buf,size_t size);
	向连接写入数据
	Input:
		sock	套接字
		buf	数据缓冲区起始地址
		size	期望写入的数据长度
	Return:
		<0	失败
		Other	实际读取的数据长度
	Note:
		由于非阻塞的特性和内核缓冲区的存在,cwb_net_write()可能在写入size字节前即返回.此时返回值指出了实际写入的数据长度.

	ssize_t cwb_net_read(int sock,void *buf,size_t size);
	读取连接中的数据
	Input:
		sock	套接字
		buf	数据缓冲区起始地址
		size	期望读取的数据长度
	Note:	同cwb_net_write()
	
	int cwb_net_close(int sock);
	关闭一个套接字/连接
	Input:
		sock	套接字/连接的文件描述符
\ecode
\line
\nl

\t2 IO\et2
\t3 头文件\et3
\code
\tab	cwb/IO.h
\ecode
\t3 数据结构\et3
\code
\tab	Cwb_IO_Watcher		IO观察者
\ecode
\t3 宏\et3
\code
\tab	CWB_IO_WOULDBLOCK	IO操作返回的原因为非阻塞的调用
	CWB_IO_OK		IO操作成功完成
	CWB_IO_TRUEERROR	IO操作产生了"真正的错误"(即IO操作的返回的原因不是信号打断或非阻塞调用返回,这样的错误真正需要注意)
	CWB_IO_WATCHER_TIMEOUT	cwb_io_watcher_wait()返回的原因是等待超时
	CWB_IO_WATCHER_READ	监听描述符的可读事件
	CWB_IO_WATCHER_WRITE	监听描述符的可写事件
\ecode
\t3 函数\et3
\code
\tab	Cwb_IO_Watcher *cwb_io_watcher_new(unsigned int maxNum);
	新建一个IO观察者
	Input:
		maxNum	最多可监听的文件描述符数量
	
	int cwb_io_watcher_watch(Cwb_IO_Watcher *watcher,
				 int fd,
				 uint8_t flag);
	监听一个文件描述符
	Input:
		watcher	IO观察者
		fd	期望监听的文件描述符
		flag	期望监听的文件描述符状态变化,取值CWB_IO_WATCHER_READ,CWB_IO_WATCHER_WRITE
			或二者的按位与结果
	
	int *cwb_io_watcher_wait(Cwb_IO_Watcher *watcher,
				 int *readyList,
				 size_t maxNum,
				 Cwb_Time_MicroSecond *timeout);
	Input:
		watcher		IO观察者
		readyList	就绪的描述符列表
		maxNum		最多接受描述符的数量
		timeout		等待的超时
	Return:
		NULL		失败
		readyList	成功且readyList不为NULL
		Other		由malloc()分配的列表,存储着状态发生变化的描述符,以-1结尾
	Note:
		此函数为阻塞调用,直至由监听的文件描述符发生期望的状态变化后返回.maxNum指定了该函数一次最多返回的描述符数量.返回的描述符存储在readyList中,以-1结尾.readyList可以为NULL:当为NULL时,函数将自动分配一个列表,该列表需要使用free()释放
	
	int cwb_io_watcher_unwatch(Cwb_IO_Watcher *watcher,
				   int fd);
	取消对文件描述符的监听
	Input:
		watcher	IO观察者
		fd	期望取消监听的文件描述符
	
	void cwb_io_watcher_destroy(Cwb_IO_Watcher *watcher);
	销毁IO观察者
	Input:
		watcher	IO观察者

	int cwb_io_watcher_resize(Cwb_IO_Watcher *watcher,
				  unsigned int maxNum);
	重设最多监听的文件描述符数量
	Input:
		watcher	IO观察者
		maxNum	期望调整到的文件描述符的最多数量
\ecode
\line
\nl

\t2 Event\et2
\t3 数据类型\et3
\code
\tab	Cwb_Event_Base		事件驱动库的数据结构
	Cwb_Event_Fd_Handler	文件事件的函数句柄
		函数类型为
int (*Cwb_Event_Fd_Handler)(Cwb_Event_Base *base,
			    int fd,void *userData);
\ecode
\t3 宏\et3
\code
\tab	CWB_EVENT_FD_READ	指定关注文件描述符的可读事件
	CWB_EVENT_FD_WRITE	指定关注文件描述符的可写事件
\ecode
\t3 函数\et3
\code
\tab	Cwb_Event_Base *cwb_event_new(void);
	创建一个事件驱动库的数据结构

	int cwb_event_fd_watch(Cwb_Event_Base *base,
			       int fd,int flag,
			       Cwb_Event_Fd_Handler handler,
			       void *userData);
	监听一个文件描述符
	Input:
		fd	文件描述符
		flag	关注的事件类型
		handler	事件的处理函数
			参数base为事件驱动库的数据结构
			    fd为事件源(文件描述符)
			    userData为传入的用户数据
		userData 传入事件处理函数的用户数据

	int cwb_event_fd_unwatch(Cwb_Event_Base *base,
				 int fd);
	取消对描述符的监听
	Input:
		fd	文件描述符

	int cwb_event_loop(Cwb_Event_Base *base);
	启动事件循环.当调用cwb_event_exit()或事件处理函数失败(返回非零)时返回
	Return:
		0	调用cwb_event_exit()结束
		非0	事件处理函数出错

	int cwb_event_exit(Cwb_Event_Base *base);
	终止事件循环

	void cwb_event_destroy(Cwb_Event_Base *base);
	销毁事件驱动库数据结构
\ecode
\line
\nl

\t2 Dstr\et2
\t3 头文件\et3
\code
\tab	cwb/Dstr.h
\ecode
\t3 数据结构\et3
\code
\tab	Cwb_Dstr	动态字符串
\ecode
\t3 函数\et3
\code
\tab	Cwb_Dstr *cwb_dstr_new(void);
	创建一个动态字符串

	void cwb_dstr_destroy(Cwb_Dstr *dstr);
	销毁一个动态字符串

	Cwb_Dstr *cwb_dstr_clear(Cwb_Dstr *dstr);
	清空动态字符串的内容

	Cwb_Dstr *cwb_dstr_assignd(Cwb_Dstr *dstr,char **p);
	破坏性赋值.将p指向的指针所指向的字符串赋值给动态字符串,并将p指向的指针置为NULL
	Input:
		p	指向指向字符串的指针的指针

	Cwb_Dstr *cwb_dstr_assign(Cwb_Dstr *dstr,const char *src);
	赋值.将src指向的字符串赋值给动态字符串.

	char *cwb_dstr_convert(Cwb_Dstr *dstr,char *buffer,size_t length);
	将动态字符串转换为C风格字符串
	Input:
		buffer	缓冲区
		length	缓冲区长度
	Return:
		当buffer为NULL时,函数将试图分配一个缓冲区并进行转换,失败时返回NULL,此时length无效
		当buffer不为NULL时,函数检查字符串是否超过buffer长度并进行转换,返回指向buffer的指针

	Cwb_Dstr *cwb_dstr_copy(Cwb_Dstr *dstr);
	复制动态字符串

	Cwb_Dstr *cwb_dstr_appendc(Cwb_Dstr *dstr,char c);
	向动态字符串追加字符
	Input:
		c	要追加的字符

	Cwb_Dstr *cwb_dstr_appends(Cwb_Dstr *dstr,const char *src);
	向动态字符串追加短字符串(长度小于CWB_CONF_DSTR_PARTSIZE)
	Input:
		src	要追加的短字符串

	Cwb_Dstr *cwb_dstr_appendd(Cwb_Dstr *dstr,char **p);
	破坏性追加.将p指向的指针指向的字符串追加到动态字符串,并将p指向的指针置为NULL
	Input:
		p	指向指向须追加的字符串的指针的指针

	Cwb_Dstr *cwb_dstr_appendy(Cwb_Dstr *str1,Cwb_Dstr *str2);
	向动态字符串str1追加动态字符串str2

	Cwb_Dstr *cwb_dstr_append(Cwb_Dstr *dstr,const char *src);
	向动态字符串追加字符串
	Input:
		src	要追加的字符串

	size_t cwb_dstr_length(Cwb_Dstr *dstr);
	获取动态字符串的长度
\ecode
\line
\nl

\t2 Buffer\et2
\t3 头文件\et3
\code
\tab	cwb/Buffer.h
\ecode
\t3 数据结构\et3
\code
\tab	Cwb_Buffer	动态缓冲区
\ecode
\t3 函数\et3
\code
\tab	Cwb_Buffer *cwb_buffer_new(void);
	创建一个动态缓冲区

	void cwb_buffer_destroy(Cwb_Buffer *buffer);
	销毁一个动态缓冲区

	Cwb_Buffer *cwb_buffer_appends(Cwb_Buffer *buffer,
				       const void *src,
				       size_t size);
	向缓冲区内追加短数据(长度小于等与CWB_CONF_BUFFER_PARTSIZE)
	Input:
		src	要追加的短数据
		size	追加的数据长度

	void *cwb_buffer_convert(Cwb_Buffer *buffer,
				 void *data,
				 size_t size);
	将动态缓冲区转换为C风格数据
	Input:
		data	存储数据的缓冲区,长度为size
		size	缓冲区长度
	Return:
		当data为NULL时,size无效.函数将试图分配一个缓冲区并进行转换,成功时返回其地址;
		当data不为NULL时,检查动态缓冲区长度是否超过size,是则返回NULL,否则进行转换,返回data
	
	size_t cwb_buffer_size(Cwb_Buffer *buffer);
	获取动态缓冲区的长度
\ecode
\line
\nl

\t2 Util\et2
\t3 头文件\et3
\code
\tab	cwb/Util.h
\ecode
\t3 函数\et3
\code
\tab	char *cwb_util_str_copys(const char *src,size_t length);
	创建指定长度字符串的一个拷贝
	Input:
		src	字符串
		length	字符串长度

	char *cwb_util_str_copy(const char *src);
	创建字符串的拷贝(效率可能低于cwb_util_str_copys())
	Input:
		src	字符串

	void cwb_util_str_tolowerd(char *str);
	就地将字符串中字符转换为小写
	Input:
		str	字符串
\ecode
\line
\nl

\t2 Ds\et2
\t3 头文件\et3
\code
\tab	cwb/Ds.h
\ecode
\t3 数据类型\et3
\code
\tab	Cwb_Ds		数据结构
	Cwb_Ds_Pair	键值对指针
	Cwb_Ds_Type	数据结构类型
		CWB_DS_HASHTABLE	哈希表
\ecode
\t3 函数\et3
\code
\tab	Cwb_Ds *cwb_ds_new(Cwb_Ds_Type type,int keyType);
	创建数据结构
	Input:
		type	数据结构类型
		keyType 键类型
			CWB_DS_SKEY	字符串键
			CWB_DS_IKEY	整型键
	
	void cwb_ds_destroy(Cwb_Ds *in);
	销毁数据结构

	Cwb_Ds_Pair *cwb_ds_search(Cwb_Ds *in,Key_Type key);
	在数据结构中搜索键(Key_Type为在创建数据结构时指定的键类型)
	Input:
		key	要查找的键
	Return:
		成功时返回指向键值对的指针,失败返回NULL

	int cwb_ds_set(Cwb_Ds *in,Cwb_Ds_Pair *pair,void *data);
	设置键值对的值

	void *cwb_ds_get(Cwb_Ds *in,Cwb_Ds_Pair *pair);
	获得键值对的值

	Cwb_Ds_Pair *cwb_ds_insert(Cwb_Ds *in,Key_Type key,
				   void *data);
	向数据结构插入键值对
	Input:
		key	插入的键
		data	键对应的值

	int cwb_ds_delete(Cwb_Ds *in,Cwb_Ds_Pair *pair);
	从数据结构中删除键值对

	Cwb_Ds_Pair *cwb_ds_first(Cwb_Ds *in);
	获得数据结构中的第一个键

	Cwb_Ds_Pair *cwb_ds_next(Cwb_Ds *in,Cwb_Ds_Pair *pair);
	获取指定键的下一个键(常用于与cwb_ds_first()共同遍历数据结构)
	Return:
		返回指定键的下一个键.当指定键为数据结构中最后一个键时,返回NULL

	void cwb_ds_freefunc(Cwb_Ds *in,Cwb_Ds_FreeFunc	func);
	设置数据结构中值的释放函数,当数据结构被销毁,键值对被删除或值被修改时会被调用
	Input:
		func	要设置的释放函数

	intptr_t cwb_ds_getkey(Cwb_Ds *in,Cwb_Ds_Pair *pair);
	获取键值对中指向键的指针
	Return:
		当键为字符串时,返回值为指针的数值表示,否则返回对应的数值键
	Warning:
		请勿修改字符串的值!

\ecode
\t3 附记\et3
\p 某些数据结构可能不支持所有的键类型,详见下表\ep
\code \tab
	Type			Support Key Type
	CWB_DS_HASHTABLE	CWB_DS_SKEY
\ecode
\line
\nl

\t2 Coder\et2
\t3 头文件\et3
\code
\tab	cwb/Coder.h
\ecode
\t3 函数\et3
\p 函数分为两类:解码器和编码器\ep
\p 所有解码器,编码器有相似的类型声明\ep
\code
\tab	解码器
	Cwb_Buffer *cwb_decode_xxx(Cwb_Buffer *output,const char *code);
	Input:
		output		输出缓冲区,为NULL时会自动分配
		code		字符类型的编码
	Return:
		当output为NULL时,解码成功返回分配的缓冲区地址,
				 失败返回NULL
		当output非NULL时,解码成功返回output,
				 失败返回NULL

	编码器
	Cwb_Dstr *cwb_encode_xxx(Cwb_Dstr *output,const void *data,size_t size);
	Input:
		output		输出缓冲区,为NULL会自动分配
		data		二进制数据
		size		数据长度
	Return:
		同cwb_decode_xxx();
\ecode
\t3 编解码器列表\et3
\code
\tab	Name		Decode		Encode
	Base64		v		v
	URI		v		v
\ecode
\line
\nl

\t2 Serializer\et2
\t3 头文件\et3
\code
\tab	cwb/Serializer.h
\ecode
\t3 数据结构\et3
\code
\tab	Cwb_Serialize_Type	序列化数据的类型
		CWB_SERIALIZE_INTEGER	整型		对应integer
		CWB_SERIALIZE_STRING	字符串类型	对应string
		CWB_SERIALIZE_DS	数据结构(Cwb_Ds) 对应ds
	Cwb_Serialize_Value	序列化的数据
\ecode
\t3 函数\et3
\code
	序列化数据的操作函数
	Cwb_Serialize_Value *cwb_serialize_new(Cwb_Serialize_Type type);
	创建一个序列化数据
	Input:
		type	数据的类型

	void cwb_serialize_destroy(Cwb_Serialize_Type type);
	销毁序列化数据,如果数据为数据结构,同时销毁其包含的数据

	Value_Type cwb_serialize_get(Cwb_Serialize_Type *p)
	获取序列化数据的值,使用成员运算符获取对应类型的数据
	e.g.
	\code
	\tab	char *str = cwb_serialize_get(v1).string;
		int *i = cwb_serialize_get(v2).integer;
		Cwb_Ds *ds = cwb_serialize_get(v3).ds;
	\ecode

	序列化,反序列化器
	序列化器
	Cwb_Dstr *cwb_serialize_xxx(Cwb_Dstr *buff,Cwb_Serialize_Value *value);
	Input:
		buff		缓冲区,为NULL则自动分配
		value		序列化数据
	Return:
		如buff为NULL,序列化成功返回分配的缓冲区指针,失败返回NULL
		否则成功时返回buff,失败时返回NULL

	反序列化器
	Cwb_Serialize_Value *cwb_deserialize_xxx(Cwb_Serialize_Value *value,const char *code);
	Input:
		value		存储数据的序列化数据
		code		序列化的数据
	Return:
		若value为NULL,序列化成功返回分配的数据指针,失败返回NULL
		否则成功时返回value,失败时返回NULL
\ecode
\t3 序列化,反序列化器列表\et3
\code
\tab	Name		Serialize	Deserialize
	Urlcoded	v		v
\ecode
\line
\nl

\t2 Coroutine\et2
\t3 头文件\et3
\code
\tab	cwb/Coroutine.h
\ecode
\t3 数据类型\et3
\code
\tab	Cwb_Coroutine		协程
	Cwb_Coroutine_Func	协程体函数
		int (*Cwb_Coroutine_Func)(Cwb_Coroutine *co,void *data);
		Input:
			co		当前协程
			data		传递到协程的用户数据
		Return:
			0		协程体正常结束
			Otherwise	协程出错
\ecode
\t3 宏\et3
\code
\tab	CWB_COROUTINE_SUSPEND		挂起状态
	CWB_COROUTINE_RUNNING		正在运行
	CWB_COROUTINE_DEAD		死亡(已结束)
	CWB_COROUTINE_ERROR		错误(返回非零值)
\ecode
\t3 函数\et3
\tab	Cwb_Coroutine *cwb_coroutine_new(Cwb_Coroutine_Func func,
					 void *data);
	创建协程
	Input:
		func		协程体
		data		传递给协程的数据

	short int cwb_coroutine_resume(Cwb_Coroutine *co);
	恢复协程执行
	Return:
		协程当前状态(见 宏)

	void cwb_coroutine_yield(Cwb_Coroutine *co);
	暂停当前协程

	short int cwb_coroutine_status(Cwb_Coroutine *co);
	获取协程状态
	Return:
		协程当前状态(见 宏)

	void cwb_coroutine_destroy(Cwb_Coroutine *co);
	销毁协程
\ecode
\line
\nl

\t2 Httpd\et2
\t3 数据类型\et3
\code
\tab	Cwb_Httpd_Conn_Method	HTTP请求方法
		CWB_HTTPD_CONN_GET,CWB_HTTPD_CONN_POST,
		CWB_HTTPD_CONN_DELETE,CWB_HTTPD_CONN_OPTIONS,
		CWB_HTTPD_CONN_PUT
	Cwb_Httpd		HTTP服务器
	Cwb_Httpd_Conn		HTTP连接
	typedef int (*Cwb_Httpd_Router_Rule)(const char *path)
			路由规则函数
			Input:
				path	请求路径(以'\'开头)
			Return:
				0	规则不成立
				非零	规则成立

	typedef int (*Cwb_Httpd_Router_Handler)(Cwb_Httpd_Conn *conn);
			路由处理函数
			Input:
				conn	当前连接
\ecode
\t3 函数\et3
\tab	基础组件
	Cwb_Httpd *cwb_httpd_new(void);
	创建HTTP服务器

	void cwb_httpd_destroy(Cwb_Httpd *httpd);
	销毁HTTP服务器

	int cwb_httpd_start(Cwb_Httpd *httpd):
	启动HTTP服务器

	路由相关
	int cwb_httpd_router_add(Cwb_Httpd *httpd,Cwb_Httpd_Router_Rule rule,
				 Cwb_Httpd_Router_Handler handler);
	注册路由项
	Input:
		rule	路由规则
		handler	路由处理函数

	int CWB_HTTPD_ROUTER_RULE_ANY(const char *path);
	预定义的路由规则:匹配全部
	Return:
		总是返回1

	连接请求相关
	const char *cwb_httpd_req_arg(Cwb_Httpd_Conn *conn);
	获取客户端以URL形式传递的参数,可能需要反序列化

	Cwb_Httpd_Conn_Method cwb_httpd_req_method(Cwb_Httpd_Conn *conn);
	获取请求类型

	Cwb_Ds *cwb_httpd_req_header(Cwb_Httpd_Conn *conn);
	获取请求头,参数已经被转换为全小写

	Cwb_Ds *cwb_httpd_req_cookie(Cwb_Httpd_Conn *conn);
	获取请求Cookie

	long int cwb_httpd_req_loadlen(Cwb_Httpd_Conn *conn);
	在请求指定了content-length属性时获取载荷长度
	Return:
		<0		失败
		Otherwise	载荷长度

	int cwb_httpd_req_read(Cwb_Httpd_Conn *conn,void *buffer,size_t size);
	读取请求载荷
	Input:
		buffer	缓冲区
		size	读取数据的长度

	响应相关
	int cwb_httpd_res_status(Cwb_Httpd_Conn *conn,int status,
				 const char *info);
	设置响应状态码及状态文本
	Input:
		status	状态码
		info	状态文本

	int cwb_httpd_res_header(Cwb_Httpd_Conn *conn,const char *key,
				 const char *value);
	设置响应头
	Input:
		key	属性名
		value	属性值

	int cwb_httpd_res_cookie(Cwb_Httpd_Conn *conn,const char *key,
				 const char *value,Cwb_Ds *attr);
	设置响应Cookie
	Input:
		key	Cookie名
		value	Cookie值
		attr	Cookie属性,值为NULL的键值对不会包含=

	int cwb_httpd_res_write(Cwb_Httpd_Conn *conn,const void *buffer,
				size_t size);
	写入响应载荷
	Input:
		buffer	缓冲区
		size	数据长度

	int cwb_httpd_res_writes(Cwb_Httpd_Conn *conn,const char *str);
	写入字符串类型的响应载荷
	Input:
		str	要写入的字符串
\ecode
\line
\nl
